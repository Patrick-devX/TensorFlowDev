######### Regression #########
********* Improving the Model ******
1. Change the Optimizer: SGD, Adam
2. Change the learning Rate
3. Try more Layers and more neurons
4. Try different Batch Size
5. Look for more Data

# Deep Learning Convolutional Network
****  Kernel ****
In Image Processing. a kernen, convolution matris, or mask is a small matrix used for blurring, sharpening, embossing, edge detection and more.
This is accomplisched by doing convolution between the kernel an the image: g(x, y) = kernen*f(x,y)

**** Max Pooling ****
The MaxPoo2D Layer is designed to compress the image, while maintening the content of the features that where highlighted by the Convolution.
By specifying (2,2) for the MaxPooling, the effect is to quarter the size of the image. The idea is that it create a 2x2 array of pixels, an
picks the biggest one. Thus, it turns 4 pixels into 1. It repeats this across the image, and in doing so, it halves both the number of
horizontal and vertical pixels, effectively reducing the image to 25% of the original image.

**** Binary Classification Problem ****
lOSS FUNKTION: We have here a binary classification problem, the model will be trained with the binary_crossentropy loss function
OPTIMIZER: Using RMSprop is preferable to stochastic gradient descent (SGD), because RMSprop automates learning-rate tuning for us.
(Orther optimizers, such as Adam and Adagrad, also automaticaly adapt the learning -rate during training, and would work equally well here)

############# Courses 2: CNN upgraded Lab #####################
C2 Lab1: First review how to build CNNs, prepare your data with ImageDataGenerator and examine the results.
    1. Explore the example data of Dogs vs. Cats
    2. Build an train a neural network to classify between the two pets
    3. Evaluate the training and validation accuracy

############# Courses 2: CNN Data Augmentation on Horses or Humans Dataset ######################
Applying data Augmentation requires good understanding of the dataset
***** ImageDataGenerator *******